import Vue from 'vue'
import Vuex from 'vuex'
import VuexPersistence from 'vuex-persist'
import Cookies from 'js-cookie'
import _ from 'lodash'


/**
 * Vuex Persistence instance
 */
const vuexCookie = new VuexPersistence({
    key: 'authorization',
    restoreState: (key, storage) => Cookies.getJSON(key),
    saveState: (key, state, storage) => Cookies.set(key, state, { expires: 3 }),
    // reducer: state => {
    //     return { authentication: state.isAuthorized }
    // },
    // filter: mutation => {
    //     return (mutation.type === 'authenticated' || mutation.type === 'unauthenticated')
    // }
});


/**
 * Include Vuex store in the system to use for global vars and states.
 * Declare new instance and set apiToken.
 */
Vue.use(Vuex);
const store = new Vuex.Store({

    // NEED TO TROUBLE SHOOT THIS, FOR SOME REASON IT ISN'T WORKING
    // WHEN I USE IT IN THE PLUGIN, SO I AM MANUALLY SAVING INFORMATION
    // TO THE BROWSER'S LOCAL STORAGE FOR NOW.
    plugins: [vuexCookie.plugin],

    state: {
        apiToken: {},
        isAuthorized: false,
        user: {}
    },

    actions: {

        /**
         * Set authorization result from Laravel Passport.
         *
         * @param commit
         * @param apiResult
         * @constructor
         */
        SET_AUTH_RESULT: ({commit}, apiResult) => {
            commit('SET_AUTH_RESULT_MUTATION', apiResult);
        },

        /**
         * Sets authorized bool for easy checking on the fly.
         *
         * @param commit
         * @constructor
         */
        SET_AUTHORIZED_BOOL: ({commit}) => {
            commit('SET_AUTHORIZED_BOOL_MUTATION');
        },

        SET_USER_OBJECT: ({commit}, user) => {
            commit('SET_USER_OBJECT_MUTATION', user);
        },

        SET_CURRENT_CLIENT: ({commit}, client) => {
            commit('SET_CURRENT_CLIENT_MUTATION', client);
        },

        SET_LOGOUT: ({commit}) => {
            commit('LOG_OUT_MUTATION');
        }

    },

    mutations: {

        /**
         * Internal setter that stores API token result object
         * to the Vuex store.
         *
         * @param state
         * @param apiResult
         * @constructor
         */
        SET_AUTH_RESULT_MUTATION: (state, apiResult) => {
            state.apiToken = apiResult;
            // window.localStorage.setItem('token', JSON.stringify(apiResult));
        },

        SET_AUTHORIZED_BOOL_MUTATION: (state) => {
            if(state.apiToken !== undefined) {
                state.isAuthorized = true;
                // window.localStorage.setItem('isAuthorized', "true");
            }
        },

        SET_USER_OBJECT_MUTATION: (state, user) => {
            state.user = user;
            // let userJson = JSON.stringify(user);
            // window.localStorage.setItem('user', userJson);
        },

        SET_CURRENT_CLIENT_MUTATION: (state, client) => {
            state.client = client;
            let clientJson = JSON.stringify(client);
            // window.localStorage.setItem('client', clientJson);
        },

        LOG_OUT_MUTATION: (state) => {
            state.apiToken = {};
            state.isAuthorized = false;
            state.user = {};

            // window.localStorage.removeItem('user');
            // window.localStorage.removeItem('token');
            // window.localStorage.removeItem('isAuthorized');
        }
    },

    getters: {
        token: state => {

            // if(state.apiToken.length === 0) {
            //     state.apiToken = JSON.parse(window.localStorage.getItem('token'));
            // }

            return state.apiToken;
        },

        isAuthorized: state => {

            // let localAuth = JSON.parse(window.localStorage.getItem('isAuthorized'));
            // if(localAuth !== undefined) {
            //     state.isAuthorized = localAuth;
            // }

            return state.isAuthorized;
        },

        currentUser: state => {

            // if(_.isEmpty(state.user)) {
            //     state.user = JSON.parse(window.localStorage.getItem('user'));
            // }

            return state.user;
        },

        getClientById: state => id => {
            // if(_.isEmpty(state.user)){
            //     state.user = JSON.parse(window.localStorage.getItem('user'));
            // }

            return state.user.clients.find(c => c.clientId === id);
        },

        client: state => {
            // if(_.isEmpty(state.client)) {
            //     state.client = JSON.parse(window.localStorage.getItem('client'));
            // }

            return state.client;
        },

        getClients: state => {
            if (!_.isEmpty(state.user)) {
                return state.user.clients.map(clientId => state.user.clients[clientId]);
            }
            return null;
        }
    }

});

// exports
export {
    store,
    vuexCookie
}